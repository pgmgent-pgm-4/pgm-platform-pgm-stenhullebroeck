{"version":3,"sources":["../../src/strategies/local.strategy.js"],"names":["localStrategy","queryGetUserByUsername","mutationCreateUser","client","AwesomeGraphQLClient","endpoint","settings","HYGRAPH_CONTENT_API","fetch","fetchOptions","headers","Authorization","HYGRAPH_ACCESS_TOKEN","passport","use","Strategy","usernameField","passwordField","username","password","done","request","authUser","HTTPError","userPayload","id","email","token","jwt","sign","user","JWT_SECRET","expiresIn","JWT_EXPIRE","authenticated","passReqToCallback","req","body","createAuthUser"],"mappings":"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","sourcesContent":["// Import external modules\r\nimport passport from 'passport';\r\nimport { Strategy } from 'passport-local';\r\nimport { AwesomeGraphQLClient } from 'awesome-graphql-client';\r\nimport fetch from 'node-fetch';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// Import custom modules\r\nimport settings from '../config/settings';\r\nimport { HTTPError } from '../utils';\r\n\r\nconst localStrategy = () => {\r\n  const queryGetUserByUsername = `\r\n    query getUserByUsername($username: String!) {\r\n      authUser(where: { username: $username }) {\r\n        id,\r\n        username,\r\n        email,\r\n        password\r\n      }\r\n    }\r\n  `;\r\n\r\n  const mutationCreateUser = `\r\n  mutation CreateAuthUser($username: String = \"\", $password: String = \"\", $email: String = \"\") {\r\n      createAuthUser(data: {username: $username, password: $password, email: $email}) {\r\n        id\r\n        password\r\n        username\r\n        email\r\n      }\r\n    }\r\n  `;\r\n\r\n  const client = new AwesomeGraphQLClient({\r\n    endpoint: `${settings.HYGRAPH_CONTENT_API}`,\r\n    fetch,\r\n    fetchOptions: {\r\n      headers: {\r\n        Authorization: `Bearer ${settings.HYGRAPH_ACCESS_TOKEN}`,\r\n      },\r\n    },\r\n  });\r\n\r\n  passport.use('login', new Strategy(\r\n    {\r\n      usernameField: 'username',\r\n      passwordField: 'password',\r\n    },\r\n    async (username, password, done) => {\r\n      try {\r\n        const { authUser } = await client.request(queryGetUserByUsername, { username });\r\n\r\n        if (!authUser) {\r\n          throw new HTTPError('User does no exists', 404);\r\n        }\r\n\r\n        if (password !== authUser.password) {\r\n          throw new HTTPError('Incorrect Credentials', 404);\r\n        }\r\n\r\n        const userPayload = {\r\n          id: authUser.id,\r\n          username: authUser.username,\r\n          email: authUser.email,\r\n        };\r\n\r\n        const token = jwt.sign({ user: userPayload }, settings.JWT_SECRET, {\r\n          expiresIn: settings.JWT_EXPIRE,\r\n        });\r\n\r\n        const authenticated = {\r\n          ...userPayload,\r\n          token,\r\n        };\r\n\r\n        done(null, authenticated);\r\n      } catch (error) {\r\n        done(error);\r\n      }\r\n    },\r\n  ));\r\n\r\n  passport.use('signup', new Strategy(\r\n    {\r\n      usernameField: 'username',\r\n      passwordField: 'password',\r\n      passReqToCallback: true,\r\n    },\r\n    async (req, username, password, done) => {\r\n      try {\r\n        // Get all the signup fields\r\n        const { email } = req.body;\r\n\r\n        // Create the AuthUser in Hygraph\r\n        const { createAuthUser } = await client.request(mutationCreateUser, { username, password, email });\r\n\r\n        // Error\r\n        if (!createAuthUser) {\r\n          throw new HTTPError(`Can't create the user with username: ${username}`, 404);\r\n        }\r\n\r\n        const userPayload = {\r\n          id: createAuthUser.id,\r\n          username: createAuthUser.username,\r\n          email: createAuthUser.email,\r\n        };\r\n\r\n        const token = jwt.sign({ user: userPayload }, settings.JWT_SECRET, {\r\n          expiresIn: settings.JWT_EXPIRE,\r\n        });\r\n\r\n        const authenticated = {\r\n          ...userPayload,\r\n          token,\r\n        };\r\n\r\n        done(null, authenticated);\r\n      } catch (error) {\r\n        done(error);\r\n      }\r\n    },\r\n  ));\r\n};\r\n\r\nexport default localStrategy;\r\n"],"file":"local.strategy.js"}