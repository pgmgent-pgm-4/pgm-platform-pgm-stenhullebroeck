{"version":3,"sources":["../../src/strategies/local.strategy.js"],"names":["localStrategy","queryGetUserByUsername","mutationCreateUser","client","AwesomeGraphQLClient","endpoint","settings","HYGRAPH_CONTENT_API","fetch","fetchOptions","headers","Authorization","HYGRAPH_ACCESS_TOKEN","passport","use","Strategy","usernameField","passwordField","username","password","done","request","authUser","HTTPError","bcrypt","compareSync","userPayload","id","email","token","jwt","sign","user","JWT_SECRET","expiresIn","JWT_EXPIRE","authenticated","passReqToCallback","req","body","hashSync","createAuthUser"],"mappings":"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","sourcesContent":["// Import external modules\r\nimport passport from 'passport';\r\nimport { Strategy } from 'passport-local';\r\nimport { AwesomeGraphQLClient } from 'awesome-graphql-client';\r\nimport fetch from 'node-fetch';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\n\r\n// Import custom modules\r\nimport settings from '../config/settings';\r\nimport { HTTPError } from '../utils';\r\n\r\nconst localStrategy = () => {\r\n  const queryGetUserByUsername = `\r\n    query getUserByUsername($username: String!) {\r\n      authUser(where: { username: $username }) {\r\n        id,\r\n        username,\r\n        email,\r\n        password\r\n      }\r\n    }\r\n  `;\r\n\r\n  const mutationCreateUser = `\r\n  mutation CreateAuthUser($username: String = \"\", $password: String = \"\", $email: String = \"\") {\r\n      createAuthUser(data: {username: $username, password: $password, email: $email}) {\r\n        id\r\n        password\r\n        username\r\n        email\r\n      }\r\n    }\r\n  `;\r\n\r\n  const client = new AwesomeGraphQLClient({\r\n    endpoint: `${settings.HYGRAPH_CONTENT_API}`,\r\n    fetch,\r\n    fetchOptions: {\r\n      headers: {\r\n        Authorization: `Bearer ${settings.HYGRAPH_ACCESS_TOKEN}`,\r\n      },\r\n    },\r\n  });\r\n\r\n  passport.use(\r\n    'login',\r\n    new Strategy(\r\n      {\r\n        usernameField: 'username',\r\n        passwordField: 'password',\r\n      },\r\n      async (username, password, done) => {\r\n        try {\r\n          const { authUser } = await client.request(queryGetUserByUsername, {\r\n            username,\r\n          });\r\n\r\n          if (!authUser) {\r\n            throw new HTTPError('User does no exists', 404);\r\n          }\r\n\r\n          if (!bcrypt.compareSync(password, authUser.password)) {\r\n            throw new HTTPError('Incorrect Credentials', 404);\r\n          }\r\n\r\n          const userPayload = {\r\n            id: authUser.id,\r\n            username: authUser.username,\r\n            email: authUser.email,\r\n          };\r\n\r\n          const token = jwt.sign({ user: userPayload }, settings.JWT_SECRET, {\r\n            expiresIn: settings.JWT_EXPIRE,\r\n          });\r\n\r\n          const authenticated = {\r\n            ...userPayload,\r\n            token,\r\n          };\r\n\r\n          done(null, authenticated);\r\n        } catch (error) {\r\n          done(error);\r\n        }\r\n      }\r\n    )\r\n  );\r\n\r\n  passport.use(\r\n    'signup',\r\n    new Strategy(\r\n      {\r\n        usernameField: 'username',\r\n        passwordField: 'password',\r\n        passReqToCallback: true,\r\n      },\r\n      async (req, username, password, done) => {\r\n        try {\r\n          // Get all the signup fields\r\n          const { email } = req.body;\r\n\r\n          // Create the AuthUser in Hygraph\r\n          const { createAuthUser } = await client.request(mutationCreateUser, {\r\n            username,\r\n            password: bcrypt.hashSync(password, 10),\r\n            email,\r\n          });\r\n\r\n          // Error\r\n          if (!createAuthUser) {\r\n            throw new HTTPError(\r\n              `Can't create the user with username: ${username}`,\r\n              404\r\n            );\r\n          }\r\n\r\n          const userPayload = {\r\n            id: createAuthUser.id,\r\n            username: createAuthUser.username,\r\n            email: createAuthUser.email,\r\n          };\r\n\r\n          const token = jwt.sign({ user: userPayload }, settings.JWT_SECRET, {\r\n            expiresIn: settings.JWT_EXPIRE,\r\n          });\r\n\r\n          const authenticated = {\r\n            ...userPayload,\r\n            token,\r\n          };\r\n\r\n          done(null, authenticated);\r\n        } catch (error) {\r\n          done(error);\r\n        }\r\n      }\r\n    )\r\n  );\r\n};\r\n\r\nexport default localStrategy;\r\n"],"file":"local.strategy.js"}