{"version":3,"sources":["../src/app.js"],"names":["dotenv","config","app","use","bodyParser","urlencoded","extended","json","nunjucks","configure","autoescape","express","set","path","join","process","cwd","corsOptions","origin","methods","preflightContinue","optionsSuccessStatus","globalRouter","get","req","res","next","err","Error","ip","originalUrl","statusCode","error","status","body","url","message","format","render","type","send","PORT","env","NODE_ENV","listen","console","log"],"mappings":"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","sourcesContent":["import path from 'path';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport nunjucks from 'nunjucks';\r\nimport dotenv from 'dotenv';\r\nimport cors from 'cors';\r\n\r\nimport passportConfig from './config/passport';\r\nimport globalRouter from './routes';\r\n\r\nimport 'core-js/stable';\r\nimport 'regenerator-runtime/runtime';\r\n\r\n// Read .env settings\r\ndotenv.config();\r\n\r\n/*\r\nFast, unopinionated, minimalist web framework for node.\r\nhttps://www.npmjs.com/package/express\r\n\r\nInitalize the express application\r\n*/\r\nconst app = express();\r\n\r\n/*\r\nNode.js body parsing middleware\r\n\r\nParse incoming request bodies in a middleware before your handlers, available under the req.body property.\r\nhttps://www.npmjs.com/package/body-parser\r\n*/\r\n\r\n// Parse application/x-www-form-urlencoded\r\napp.use(\r\n  bodyParser.urlencoded({\r\n    extended: false,\r\n    // eslint-disable-next-line comma-dangle\r\n  })\r\n);\r\n// Parse application/json\r\napp.use(bodyParser.json());\r\n// Set default view engine\r\nnunjucks.configure('views', {\r\n  autoescape: true,\r\n  express: app,\r\n});\r\napp.set('view engine', 'html');\r\n// Serve static content\r\napp.use(express.static(path.join(process.cwd(), '..', 'client', 'build')));\r\n\r\n/*\r\nPassport\r\n*/\r\npassportConfig(app);\r\n\r\n/*\r\nCors parsing middleware\r\n\r\ncors is a node.js package for providing a Connect/Express middleware that can be used to enable CORS with various options.\r\nhttps://www.npmjs.com/package/cors\r\n*/\r\nconst corsOptions = {\r\n  origin: '*',\r\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n  preflightContinue: false,\r\n  optionsSuccessStatus: 204,\r\n};\r\napp.use(cors(corsOptions));\r\n\r\n/*\r\nAdd all routers to Express app\r\n\r\nAll routes (paths) are registered\r\n*/\r\napp.use('/', globalRouter);\r\n\r\n/*\r\nNot Found routes\r\n*/\r\napp.get('*', (req, res, next) => {\r\n  const err = new Error(`${req.ip} tried to access ${req.originalUrl}`);\r\n  err.statusCode = 301;\r\n  next(err);\r\n});\r\n\r\n/*\r\nError Handler\r\n*/\r\napp.use((err, req, res, next) => {\r\n  const error = err;\r\n  error.statusCode = error.statusCode || 500;\r\n  res.status(error.statusCode);\r\n\r\n  const body = {\r\n    url: req.url,\r\n    error: {\r\n      message: error.message,\r\n      statusCode: error.statusCode,\r\n    },\r\n  };\r\n\r\n  res.format({\r\n    'application/json': () => {\r\n      res.json(body);\r\n    },\r\n    'text/html': () => {\r\n      res.render('error', body);\r\n    },\r\n    default: () => {\r\n      res\r\n        .type('text/plain')\r\n        .send('You have to accept application/json or text/html!');\r\n    },\r\n  });\r\n\r\n  next();\r\n});\r\n\r\n// Set the port used by the server\r\nconst PORT = process.env.PORT || 8080;\r\n\r\n// Set the Node environment\r\nconst NODE_ENV = process.env.NODE_ENV || 'development';\r\n\r\n// Express js listen method to run project on http://localhost:3000\r\napp.listen(PORT, () => {\r\n  console.log(`Application is running in ${NODE_ENV} mode on port ${PORT}`);\r\n});\r\n"],"file":"app.js"}